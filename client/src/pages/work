import {getDownloadURL, getStorage, ref, uploadBytesResumable} from 'firebase/storage'
import {app} from '../firebase'

export default function Listing() {
  const [files,setFiles] =useState([]);
  const [fromData,setFromData] =useState({
    image:[],
  })
  console.log(fromData);
  const handleImageUpload =()=>{
    if(files.length >0 && files.length < 7){
      const promises=[]

      for(let i=0; i < files.length; i++){
        promises.push(storeImage(files[i]));
      }
      Promise.all(promises).then((urls)=>{
        setFromData({...fromData ,image:fromData.image.concat(urls)})
      })
    }
  }
  const storeImage = async(file) =>{
    return new Promise((resolve,reject) =>{
      const storage = getStorage(app);
      const fileName = new Date().getTime() + file.name;
      const storagRef = ref(storage,fileName);
      const uploadTask =uploadBytesResumable(storagRef,file);
      
uploadTask.on('state_changed',
  (snapshot) => {
    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
    console.log('Upload is ' + progress + '% done')},
      (error) =>{
        reject(error)
      },
      () =>{
        getDownloadURL(uploadTask.snapshot.ref).then((downloadUrl) =>{
          resolve(downloadUrl);
        })
      })
    })
  }